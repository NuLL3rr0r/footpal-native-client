# @author  Mohammad S. Babaei <info@babaei.net>



################# BOOST

1. In boost source tree:
    # <= 1.55.0
    cd .\tools\build\v2\engine\
    # >= 1.56.0
    cd .\tools\build\src\engine\
    .\build.bat mingw
    move .\bin.ntx86\bjam.exe ..\..\..\..\
    cd ..\..\..\..\
    mkdir .\build_deb
    mkdir .\build_rel

2. For more info and available libs:
    * bjam --help
    * bjam --show-libraries

3. To strat the build process:

/// NOTE: Use absolute path for ZLIB_SOURCE

bjam toolset=gcc variant=debug --layout=system threading=multi link=shared runtime-link=shared --build-dir=".\build_deb" --prefix="C:\Boost_deb" --without-mpi --without-python -sZLIB_SOURCE="D:\zlib-1.2.8" install

bjam toolset=gcc variant=release --layout=system threading=multi link=shared runtime-link=shared --build-dir=".\build_rel" --prefix="C:\Boost_rel" --without-mpi --without-python -sZLIB_SOURCE="D:\zlib-1.2.8" install

4. Now, (for both DEB and REL variants)
copy Boost\include\* to our include dir
copy Boost\lib\* to our lib dir



################# CPPDB & SQLITE

1. In sqlite-amalgamation-3080600
    * qmake -project

2. Rename sqlite-amalgamation-3080600.pro to sqlite3.pro

3. In sqlite3.pro do the following changes:
TEMPLATE = lib
TARGET = sqlite3
INCLUDEPATH += .
CONFIG -= qt

4. Do the following:
    * qmake
    * mingw32-make all -j5

5. Copy the following files to the appropriate directory:
debug/sqlite3.dll
release/sqlite3.dll
sqlite3.h
sqlite3ext.h

6. Create both build_debug and build_release directories inside the source tree of CppDB.

7. For debug build:
cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug -DCMAKE_LIBRARY_PATH=../sqlite3/debug -DCMAKE_INCLUDE_PATH=../sqlite3/ -DSQLITE_BACKEND_INTERNAL=OFF -DDISABLE_MYSQL=ON -DDISABLE_PQ=ON -DDISABLE_ODBC=ON ..\

8. For release build:
cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_PATH=../sqlite3/release -DCMAKE_INCLUDE_PATH=../sqlite3/ -DSQLITE_BACKEND_INTERNAL=OFF -DDISABLE_MYSQL=ON -DDISABLE_PQ=ON -DDISABLE_ODBC=ON ..\

9. For each build:
mingw32-make -j5

10. Copy the following files to your own corresponding directory:
libcppdb.dll
libcppdb_sqlite3.dll
cppdb/*



################# CRYPTOPP

1. In cryptopp562
    * del GNUmakefile
    * qmake -project

2. Rename cryptopp562.pro to cryptopp.pro

3. In cryptopp.pro do the following changes:
TEMPLATE = lib
TARGET = cryptopp
INCLUDEPATH += .
CONFIG -= qt
LIBS += -lws2_32
//QMAKE_CFLAGS += -DCRYPTOPP_DISABLE_ASM
//QMAKE_CXXFLAGS += -DCRYPTOPP_DISABLE_ASM

4. Open fipstest.cpp and replace every 'OutputDebugString' with 'OutputDebugStringA'.

5. Do the following:
    * qmake
    * mingw32-make all -j5

6. Copy the following files to your own corresponding directory:
debug/cryptopp.dll
release/cryptopp.dll
./*.h



################# LIBB64

1. In libb64-1.2/src
    * del Makefile
    * qmake -project

2. Rename src.pro to b64.pro

3. In b64.pro do the following changes:
TEMPLATE = lib
TARGET = b64
INCLUDEPATH += ../include
CONFIG -= qt

4. Do the following:
    * qmake
    * mingw32-make all -j5

5. Copy the following files to your own corresponding directory:
debug/b64.dll
release/b64.dll
include/b64/*



################# VMIME

# Note: You have to install Git-bash for perl.exe, sh.exe, etc. (Note: Install it somewhere without space in the path or you will get errors in the OpenSSL configuration stage)

# Download the latest version of the following dependencies:
http://ftp.gnu.org/pub/gnu/gettext/                         # e.g. gettext-0.19.2.tar.xz
http://gmplib.org/download/gmp/                             # e.g. gmp-6.0.0a.tar.xz
ftp://ftp.gnutls.org/gcrypt/gnutls/v3.2                     # check for stable latest version here http://gnutls.org/download.html first, e.g. gnutls-3.2.17.tar.xz
http://ftp.gnu.org/gnu/gsasl/                               # e.g. libgsasl-1.8.0.tar.gz
http://ftp.gnu.org/pub/gnu/libiconv/                        # e.g. libiconv-1.14.tar.gz
http://ftp.gnu.org/gnu/libtasn1/                            # e.g. libtasn1-4.2.tar.gz
http://ftp.gnu.org/gnu/nettle/                              # e.g. nettle-3.0.tar.gz
https://www.openssl.org/source/                             # e.g. openssl-1.0.1i.tar.gz
http://p11-glue.freedesktop.org/releases/                   # e.g. p11-kit-0.20.6.tar.gz
http://sourceforge.net/projects/trousers/files/trousers/    # e.g. trousers-0.3.13.tar.gz
http://unbound.net/downloads/                               # e.g. unbound-1.4.22.tar.gz
http://zlib.net/zlib-1.2.8.tar.xz

# Checkout VMime from GitHub (Since the master branch migrated to CMake):
git clone https://github.com/kisli/vmime.git


** zlib

tar xvJf zlib-1.2.8.tar.xz
cd zlib-1.2.8
mkdir _debug _release

# debug build
cd _debug && cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=D:\build\_deb-zlib ..\
mingw32-make.exe -j5 && mingw32-make.exe install

# release build
cd _release && cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=D:\build\_rel-zlib ..\
mingw32-make.exe -j5 && mingw32-make.exe install

# Copy the following:
    _rel-zlib/include/* to our include dir
    _rel-zlib/bin/*.dll to our rel-lib dir
    _deb-zlib/bin/*.dll to our deb-lib dir


** libiconv

tar xvzf libiconv-1.14.tar.gz
cd libiconv-1.14
mkdir _debug _release

# debug build
cd _debug && ../configure --prefix=/d/build/_deb-libiconv CFLAGS="-g3 -O0" CPPFLAGS="-g3 -O0" CXXFLAGS="-g3 -O0"
make -j5 && make install

# release build
cd _release && ../configure --prefix=/d/build/_rel-libiconv CFLAGS="-DDEBUG" CPPFLAGS="-DDEBUG" CXXFLAGS="-DDEBUG"
make -j5 && make install

# Copy the following:
    _rel-libiconv/include/* to our include dir
    _rel-libiconv/bin/*.dll to our rel-lib dir
    _deb-libiconv/bin/*.dll to our deb-lib dir


** gmp

tar xvJf gmp-6.0.0a.tar.xz
cd gmp-6.0.0
mkdir _debug _release

# debug build
cd _debug && ../configure --prefix=/d/build/_deb-gmp --disable-static --enable-shared --disable-assembly --enable-cxx CPPFLAGS=-DDEBUG CFLAGS="-g3 -O0" CXXFLAGS="-g3 -O0"
make -j5 && make install

# release build
cd _release && ../configure --prefix=/d/build/_rel-gmp --disable-static --enable-shared --disable-assembly --enable-cxx CFLAGS="-DDEBUG" CPPFLAGS="-DDEBUG" CXXFLAGS="-DDEBUG"
make -j5 && make install

# Copy the following:
    _rel-gmp/include/* to our include dir
    _rel-gmp/bin/*.dll to our rel-lib dir
    _deb-gmp/bin/*.dll to our deb-lib dir






** openssl

tar xvzf openssl-1.0.1i.tar.gz
cd openssl-1.0.1i

./Configure mingw shared zlib-dynamic no-asm -I/d/build/_rel-zlib/include/ -L/d/build/_rel-zlib/bin/ --prefix=./dist --openssldir=/d/build/_openssl

make depend -j5
make -j5
make install


cd _debug && ../configure --prefix=/d/build/_deb-openssl CFLAGS="-g3 -O0" CPPFLAGS="-g3 -O0" CXXFLAGS="-g3 -O0"
make -j5 && make install

cd ..

# release build
cd _release && ../configure --prefix=/d/build/_rel-openssl CFLAGS="-DDEBUG" CPPFLAGS="-DDEBUG" CXXFLAGS="-DDEBUG"
make -j5 && make install

Copy the following:
    _rel-openssl/include/* to our include dir
    _rel-openssl/bin/*.dll to our rel-lib dir
    _deb-openssl/bin/*.dll to our deb-lib dir







tar xvJf gettext-0.19.2.tar.xz
cd gettext-0.19.2
mkdir _debug _release

# debug build
cd _debug && ../configure --prefix=/d/build/_deb-gettext CFLAGS="-g3 -O0 -Id:/build/_deb-libiconv/include" CPPFLAGS="-g3 -O0 -Id:/build/_deb-libiconv/include" CXXFLAGS="-g3 -O0 -Id:/build/_deb-libiconv/include" LDFLAGS="-Ld:/build/_deb-libiconv/bin"
make -j5 && make install

cd ..

# release build
cd _release && ../configure --prefix=/d/build/_rel-gettext CFLAGS="-DDEBUG" CPPFLAGS="-DDEBUG" CXXFLAGS="-DDEBUG"
make -j5 && make install

Copy the following:
    _rel-gettext/include/* to our include dir
    _rel-gettext/bin/*.dll to our rel-lib dir
    _deb-gettext/bin/*.dll to our deb-lib dir

cd ../../



tar xvJf gnutls-3.2.17.tar.xz
tar xvzf libgsasl-1.8.0.tar.gz
tar xvzf nettle-3.0.tar.gz
tar xvzf p11-kit-0.20.6.tar.gz
tar xvzf trousers-0.3.13.tar.gz
tar xvzf unbound-1.4.22.tar.gz
tar xvJf zlib-1.2.8.tar.xz




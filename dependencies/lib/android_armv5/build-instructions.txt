INSTRUCTIONS FOR BUILDING ON SLACKWARE64

!! FIRST YOU SHOULD HAVE A FUNCTIONAL MULTILIB SLACKWARE INSTALLATION IN ORDER FOR THIS TO WORK !!



################# BOOST

cd ~/Desktop
wget http://zlib.net/zlib-1.2.8.tar.xz
tar xvJf zlib-1.2.8.tar.xz

# ignore for now, it requires icu binaries for Android/Arm
#wget http://download.icu-project.org/files/icu4c/53.1/icu4c-53_1-src.tgz
#tar xvzf icu4c-53_1-src.tgz
#-sICU_PATH="/home/babaei/Desktop/icu" \

git clone https://github.com/MysticTreeGames/Boost-for-Android.git
cp -vr boost_1_55_0.tar.bz2 ~/Desktop/Boost-for-Android-master/
cd ~/Desktop/Boost-for-Android-master
./build-android.sh --help
ls /opt/android/ndk/toolchains/

nano -w ./build-android.sh
########
echo "Detected Android NDK version $NDK_RN"

case "$NDK_RN" in
.
.
.
    "8e (64-bit)")
        TOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.8}
        CXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++
        TOOLSET=gcc-androidR8e
        ;;
    "9 (64-bit)"|"9b (64-bit)"|"9c (64-bit)"|"9d (64-bit)")
        TOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.8}
        CXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++
        TOOLSET=gcc-androidR8e
        ;;
    "10 (64-bit)")
        TOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.8}
        CXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++
        TOOLSET=gcc-androidR8e
        ;;
    *)
        echo "Undefined or not supported Android NDK version!"
        exit 1
esac
########

export MAKEFLAGS="-j5"

mkdir -p /opt/android/include
mkdir -p /opt/android/lib/android_armv5/debug
mkdir -p /opt/android/lib/android_armv5/release

nano -w ./build-android.sh
########
  { ./bjam -q                         \
         target-os=linux              \
         toolset=$TOOLSET             \
         $cxxflags                    \
         variant=debug                \
         link=static                  \
         runtime-link=static          \
         threading=multi              \
         --layout=system              \
         --prefix="./../$BUILD_DIR/"  \
         -sZLIB_SOURCE="/home/babaei/Desktop/zlib-1.2.8" \
         $LIBRARIES                   \
         install 2>&1                 \
         || { dump "ERROR: Failed to build boost for android!" ; exit 1 ; }
  } | tee -a $PROGDIR/build.log
########

# To get list of available boost binary libraries
tar xjf boost_1_55_0.tar.bz2 && cd boost_1_55_0
./bootstrap.sh --show-libraries
cd .. && rm -rf boost_1_55_0

# 1.55.0 - without python library
./build-android.sh --boost=1.55.0 --toolchain=arm-linux-androideabi-4.8 --with-libraries=atomic,chrono,context,coroutine,date_time,exception,filesystem,graph,graph_parallel,iostreams,locale,log,math,mpi,program_options,random,regex,serialization,signals,system,test,thread,timer,wave /opt/android/ndk

sudo mv ./build/include/boost /opt/android/include/
sudo mv ./build/lib/* /opt/android/lib/android_armv5/debug/
ls /opt/android/include/
ls /opt/android/lib/android_armv5/debug/

rm -rf build
rm -rf boost_1_55_0

nano -w ./build-android.sh
########
  { ./bjam -q                         \
         target-os=linux              \
         toolset=$TOOLSET             \
         $cxxflags                    \
         variant=release              \
         link=static                  \
         runtime-link=static          \
         threading=multi              \
         --layout=system              \
         --prefix="./../$BUILD_DIR/"  \
         -sZLIB_SOURCE="/home/babaei/Desktop/zlib-1.2.8" \
         $LIBRARIES                   \
         install 2>&1                 \
         || { dump "ERROR: Failed to build boost for android!" ; exit 1 ; }
  } | tee -a $PROGDIR/build.log
########

# To get list of available boost binary libraries
tar xjf boost_1_55_0.tar.bz2 && cd boost_1_55_0
./bootstrap.sh --show-libraries
cd .. && rm -rf boost_1_55_0

# 1.55.0 - without python library
./build-android.sh --boost=1.55.0 --toolchain=arm-linux-androideabi-4.8 --with-libraries=atomic,chrono,context,coroutine,date_time,exception,filesystem,graph,graph_parallel,iostreams,locale,log,math,mpi,program_options,random,regex,serialization,signals,system,test,thread,timer,wave /opt/android/ndk

sudo mv ./build/lib/* /opt/android/lib/android_armv5/release/
ls /opt/android/lib/android_armv5/release/

rm -rf build
rm -rf boost_1_55_0



################# CPPDB & SQLITE

git clone https://github.com/lookout/sqlite-android.git
cd sqlite-android

nano -w Makefile
########
SQLITE_VERSION  ?= 3080600

SQLITE_URL      := http://www.sqlite.org/2014/$(SQLITE_BASENAME).zip
########

wget http://sqlite.org/2014/sqlite-amalgamation-3080600.zip
unzip sqlite-amalgamation-3080600.zip
cd sqlite-amalgamation-3080600
sudo cp -vr ./sqlite3.h ./sqlite3ext.h /opt/android/include/
cd ..
rm -rf sqlite-amalgamation-3080600
ls /opt/android/include/

# NOTE: "APP_ABI := all" or a subset is also valid

nano -w jni/Application.mk
########
APP_OPTIM := debug
APP_ABI := armeabi
APP_PLATFORM := android-9
########

/opt/android/ndk/ndk-build
sudo cp -vr ./obj/local/armeabi/libsqlite.a /opt/android/lib/android_armv5/debug/libsqlite3.a
ls /opt/android/lib/android_armv5/debug/

rm -rf obj

nano -w jni/Application.mk
########
APP_OPTIM := release
APP_ABI := armeabi
APP_PLATFORM := android-9
########

/opt/android/ndk/ndk-build
sudo cp -vr ./obj/local/armeabi/libsqlite.a /opt/android/lib/android_armv5/release/libsqlite3.a
ls /opt/android/lib/android_armv5/release/

rm -rf obj


tar xvjf cppdb-0.3.1.tar.bz2
cd cppdb-0.3.1
sudo cp -vr ./cppdb /opt/android/include/
ls /opt/android/include/

wget https://raw.githubusercontent.com/taka-no-me/android-cmake/master/android.toolchain.cmake
rm -rf /tmp/android-toolchain
/opt/android/ndk/build/tools/make-standalone-toolchain.sh --platform=android-9 --install-dir=/tmp/android-toolchain --toolchain=arm-linux-androideabi-4.8
cp -vr /opt/android/include/sqlite3.h /opt/android/include/sqlite3ext.h /tmp/android-toolchain/sysroot/usr/include/

nano -w CMakeLists.txt
########
	#find_library(PTHREAD_LIB pthread NAMES thr kse)
.
.
.
	#target_link_libraries(cppdb ${PTHREAD_LIB})
    set(C_FLAGS "${C_FLAGS} -pthreads")
    set(CXX_FLAGS "${CXX_FLAGS} -pthreads")
########

mkdir _debug && cd _debug
cp -vr /opt/android/lib/android_armv5/debug/libsqlite3.a /tmp/android-toolchain/sysroot/usr/lib/
cmake -DCMAKE_TOOLCHAIN_FILE=../android.toolchain.cmake -DANDROID_STANDALONE_TOOLCHAIN=/tmp/android-toolchain -DANDROID_ABI=armeabi -DCMAKE_BUILD_TYPE=Debug -DCMAKE_LIBRARY_PATH=/opt/android/lib/android_armv5/debug/ -DCMAKE_INCLUDE_PATH=/opt/android/include/ -DSQLITE_BACKEND_INTERNAL=OFF -DDISABLE_MYSQL=ON -DDISABLE_PQ=ON -DDISABLE_ODBC=ON ../
make -j5
sudo cp -vr ../libs/armeabi/libcppdb.a ../libs/armeabi/libcppdb_sqlite3.a /opt/android/lib/android_armv5/debug/
ls /opt/android/lib/android_armv5/debug/
cd ..

rm -rf /tmp/android-toolchain/sysroot/usr/lib/libsqlite3.a
rm -rf ./libs
rm -rf _debug

mkdir _release && cd _release
cp -vr /opt/android/lib/android_armv5/release/libsqlite3.a /tmp/android-toolchain/sysroot/usr/lib/
cmake -DCMAKE_TOOLCHAIN_FILE=../android.toolchain.cmake -DANDROID_STANDALONE_TOOLCHAIN=/tmp/android-toolchain -DANDROID_ABI=armeabi -DCMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_PATH=/opt/android/lib/android_armv5/debug/ -DCMAKE_INCLUDE_PATH=/opt/android/include/ -DSQLITE_BACKEND_INTERNAL=OFF -DDISABLE_MYSQL=ON -DDISABLE_PQ=ON -DDISABLE_ODBC=ON ../
make -j5
sudo cp -vr ../libs/armeabi/libcppdb.a ../libs/armeabi/libcppdb_sqlite3.a /opt/android/lib/android_armv5/release/
ls /opt/android/lib/android_armv5/release/
cd ..

rm -rf /tmp/android-toolchain/sysroot/usr/lib/libsqlite3.a
rm -rf ./libs
rm -rf _release
#######################################